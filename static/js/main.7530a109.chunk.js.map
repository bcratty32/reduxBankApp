{"version":3,"sources":["store/index.js","reducers/index.js","actions/index.js","ButtonGroup.js","App.js","registerServiceWorker.js","index.js","images/girl.png"],"names":["store","createStore","state","action","console","log","type","Object","objectSpread","balance","amount","username","setWithDraw","dispatchWithDrawAction","e","getState","target","dataset","dispatch","ButtonGroup","_ref","amounts","react_default","a","createElement","map","i","data-amount","key","concat","onClick","className","App","src","photographer","alt","formatNumber","prefix","src_ButtonGroup","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","render","ReactDOM","src_App_0","document","getElementById","subscribe","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7530a109.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport reducer from \"../reducers\";\n\nconst initialState = {\n    username: \"Brando\",\n    balance: 100000000\n}\nconst store = createStore(reducer, initialState);\n\nexport default store;","export default (state, action) => {\n    console.log(action);\n    switch (action.type) {\n        case \"SET_WITHDRAW\":\n            return {\n                ...state,\n                balance: state.balance - action.amount\n            };\n        default:\n            return state;\n    }\n}","export const setWithDraw = amount => ({ type: \"SET_WITHDRAW\", amount })","import React from \"react\";\nimport store  from \"./store\";\nimport { setWithDraw } from \"./actions\";\n\nfunction dispatchWithDrawAction(e) {\n    // Prevent negative balance :)))\n    if (store.getState().balance >= e.target.dataset.amount) {\n        const amount = e.target.dataset.amount;\n        store.dispatch(setWithDraw(amount));\n    }\n}\nconst ButtonGroup = ({ amounts }) => (\n    <span>\n        {amounts.map((amount, i) => (\n            <button\n                data-amount={amount}\n                key={`btn-${i}`}\n                onClick={dispatchWithDrawAction}\n            >\n                WITHDRAW ${amount}\n            </button>\n        ))}\n        <br />\n        <button data-amount={store.getState().balance} onClick={dispatchWithDrawAction} className=\"App__giveaway\">Give away all your cash to charity</button>\n    </span>\n)\n\nexport default ButtonGroup;","import React, { Component } from \"react\";\nimport formatNumber from \"format-number\";\nimport photographer from \"./images/girl.png\";\nimport \"./App.css\";\nimport store from \"./store\";\nimport ButtonGroup from \"./ButtonGroup\";\n\n// class App extends Component {\n//   state = {\n//     username: \"Janny\",\n//     totalAmount: 2500701\n//   };\n//   render() {\n//     const { totalAmount, username } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <img className=\"App__userpic\" src={photographer} alt=\"user\" />\n//         <p className=\"App__username\">Hello, {username}! </p>\n//         <div className=\"App__amount\">\n//           {formatNumber({ prefix: \"$\" })(totalAmount)}\n//           <p className=\"App__amount--info\">Total Amount</p>\n//         </div>\n\n//         <section className=\"App__buttons\">\n//           <button data-amount=\"10000\">WITHDRAW $10,000</button>\n//           <button data-amount=\"5000\">WITHDRAW $5,000</button>\n//         </section>\n\n//         <p className=\"App__giveaway\">Give away all your cash to charity</p>\n//       </div>\n//     );\n//   }\n// }\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <img className=\"App__userpic\" src={photographer} alt=\"user\" />\n      <p className=\"App__username\">Howdy {store.getState().username}! </p>\n      <div className=\"App__amount\">\n        {formatNumber({ prefix:  \"$\"})(store.getState().balance)}\n        <p className=\"App__amount--info\">Total Amount</p>\n      </div>\n\n      <section className=\"App__buttons\">\n        <ButtonGroup key={1} amounts={[\"10000\", \"5000\"]} />\n\n      </section>\n\n    </div>\n  );\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store  from './store';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst render = function() { \n    ReactDOM.render(<App />, document.getElementById('root'));\n};\nrender();\nstore.subscribe(render);\nregisterServiceWorker();","module.exports = __webpack_public_path__ + \"static/media/girl.1c4c0c8a.png\";"],"sourceRoot":""}